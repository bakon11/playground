{"version":3,"sources":["JSONValidationErrorList.tsx","MonacoJSONEditor.tsx","SnackBar/SnackBar.tsx","fetchUrlSchemaFile.tsx","fetchSchemaFromRpcDiscover.tsx","AppBar/AppBar.tsx","App.tsx","index.tsx"],"names":["JSONValidationErrorList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","classes","markers","length","react_default","a","createElement","className","wrapper","list","map","marker","key","message","startLineNumber","startColumn","React","Component","withStyles","theme","color","palette","secondary","main","height","listStyle","overflow","maxHeight","empty","require","default","NotificationType","initVimMode","MonacoJSONEditor","monaco","metaSchema","editorInstance","vimMode","statusNode","createRef","addCommands","bind","assertThisInitialized","getModels","model","modelUri","parse","concat","Math","random","schema","defaultV","_","isEmpty","defaultValue","JSON","stringify","undefined","emptySchema","openrpc","info","title","version","methods","localStorageSchema","window","localStorage","getItem","createModel","json","jsonDefaults","setDiagnosticsOptions","enableSchemaRequest","schemas","fileMatch","uri","toString","validate","updateOptions","tabSize","options","language","autoIndent","formatOnPaste","formatOnType","current","create","objectSpread","setModel","setSelection","focus","onresize","_this2","layout","setTimeout","onDidChangeModelContent","changedSchema","getValue","setItem","onChange","editor","_this3","addAction","id","label","keybindings","chord","CtrlCmd","KEY_K","KEY_R","contextMenuGroupId","contextMenuOrder","run","ed","result","prompt","KEY_V","onVimKeybind","onChangeMarkers","getModelMarkers","dispose","innerHTML","document","getElementById","Fragment","style","ref","position","bottom","background","opacity","fetchUrlSchemaFile","_ref","asyncToGenerator","regenerator_default","mark","_callee","schemaUrl","response","wrap","_context","prev","next","fetch","sent","abrupt","t0","Error","stop","_x","apply","arguments","idCounter","fetchSchemaFromRpcDiscover","url","body","jsonrpc","method","params","headers","Content-Type","ApplicationBar","_this$props","uiSchema","index_es","justify","alignItems","container","spacing","item","xs","sm","direction","appBar","alt","src","variant","only","padding","width","elevation","onChangeUrl","placeholder","marginLeft","control","checked","onSplitViewChange","value","unit","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","InfoIcon","debug","SnackBarCntWrapper","onClose","other","objectWithoutProperties","Icon","assign","classNames","aria-describedby","icon","iconVariant","action","IconButton_default","aria-label","close","onClick","Close_default","SnackBarContentWrapper","green","backgroundColor","dark","primary","amber","fontSize","marginRight","display","margin","SnackBarWrapper","_this$props2","notification","open","autoHideDuration","anchorOrigin","vertical","horizontal","type","SnackBar","App","debouncedHandleUrlChange","setNotification","setState","setErrorNotification","dHandleUrlChange","jsonOrRPC","newSchema","msg","rpcResult","_msg","match","console","t1","setValue","refreshEditorData","handleUrlChange","event","target","handleUISchemaAppBarChange","name","defineProperty","parsedSchema","reactJsonOptions","collapseStringsAfterLength","displayDataTypes","displayObjectSize","indentWidth","ui:inputPlaceholder","ui:logoUrl","ui:splitView","ui:title","ui:defaultExpanded","setMarkers","debounce","handleSnackbarClose","urlParams","qs","location","search","ignoreQueryPrefix","depth","decoder","str","test","parseFloat","decodeURIComponent","refParser","dereference","_context3","refeshMarkers","AppBar","flexDirection","src_JSONValidationErrorList","MonacoJSONEditor_MonacoJSONEditor","build_default","ReactDOM","render","App_App"],"mappings":"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","file":"static/js/main.69869ef7.chunk.js","sourcesContent":["import React from \"react\";\nimport { withStyles, Theme, WithStyles } from \"@material-ui/core\";\n\nconst styles = (theme: Theme) => ({\n  list: {\n    color: theme.palette.secondary.main,\n    height: \"100%\",\n    listStyle: \"none\",\n    overflow: \"scroll\",\n  },\n  wrapper: {\n    maxHeight: \"200px\",\n  },\n});\n\ninterface IProps extends WithStyles<typeof styles> {\n  markers: any[];\n}\n\nclass JSONValidationErrorList extends React.Component<IProps> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {};\n  }\n  public render() {\n    const { classes } = this.props;\n    if (!this.props.markers || this.props.markers.length === 0) { return null; }\n    return (\n      <div className={classes.wrapper}>\n        <ul className={classes.list}>\n          {this.props.markers && this.props.markers.map((marker) => {\n            return (\n              <li key={marker.message}>\n                {marker.startLineNumber}:{marker.startColumn} - {marker.message}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(JSONValidationErrorList);\n","import React, { ReactNode } from \"react\";\n/* tslint:disable */\nlet empty = require(\"json-schema-empty\");\nempty = empty.default;\nconst { initVimMode } = require(\"monaco-vim\");\n/* tslint:enable */\nimport * as monaco from \"monaco-editor\";\nimport _ from \"lodash\";\nimport { JSONSchema4 } from \"json-schema\";\nimport schema from \"@open-rpc/meta-schema\";\n\ninterface IProps {\n  defaultValue?: string;\n  onChangeMarkers?: any;\n  onChange?: any;\n}\n\nexport default class MonacoJSONEditor extends React.Component<IProps> {\n  private monaco: React.RefObject<HTMLDivElement>;\n  private metaSchema: JSONSchema4 | null;\n  private editorInstance: monaco.editor.IStandaloneCodeEditor | null;\n  private vimMode: any;\n  private statusNode: HTMLElement | null;\n  constructor(props: IProps) {\n    super(props);\n    this.monaco = React.createRef();\n    this.metaSchema = null;\n    this.editorInstance = null;\n    this.addCommands = this.addCommands.bind(this);\n    this.vimMode = null;\n    this.statusNode = null;\n  }\n\n  public async componentDidMount() {\n    const existingModels = monaco.editor.getModels().length > 0;\n    let model;\n\n    if (!existingModels) {\n      /* tslint:disable */\n      /* tslint:enable */\n      const modelUri = monaco.Uri.parse(`inmemory:/${Math.random()}/model/userSpec.json`);\n\n      this.metaSchema = schema as JSONSchema4;\n      const defaultV = _.isEmpty(this.props.defaultValue) ? null\n        : JSON.stringify(this.props.defaultValue, undefined, \"  \");\n      const emptySchema = JSON.stringify({\n        openrpc: \"1.0.0-rc1\",\n        info: {\n          title: \"\",\n          version: \"\",\n        },\n        methods: [],\n      }, undefined, \"\\t\");\n      const localStorageSchema = window.localStorage.getItem(\"schema\");\n      const defaultValue = defaultV || localStorageSchema || emptySchema;\n\n      model = monaco.editor.createModel(defaultValue, \"json\", modelUri);\n      monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n        enableSchemaRequest: true,\n        schemas: [\n          {\n            fileMatch: [\"*\"],\n            schema,\n            uri: modelUri.toString(),\n          },\n        ],\n        validate: true,\n      });\n      model.updateOptions({ tabSize: 2 });\n    } else {\n      model = monaco.editor.getModels()[0];\n    }\n\n    const options = {\n      language: \"json\",\n      options: {\n        autoIndent: true,\n        formatOnPaste: true,\n        formatOnType: true,\n      },\n      theme: \"vs-dark\",\n    };\n\n    if (this.monaco && this.monaco.current) {\n      this.editorInstance = monaco.editor.create(this.monaco.current, {\n        ...options,\n      });\n      this.editorInstance.setModel(model);\n      this.editorInstance.setSelection(new monaco.Selection(4, 13, 4, 13));\n\n      this.editorInstance.focus();\n      window.onresize = () => this.editorInstance && this.editorInstance.layout();\n      setTimeout(() => this.editorInstance && this.editorInstance.layout(), 1000);\n\n      this.editorInstance.onDidChangeModelContent(() => {\n        const changedSchema = this.editorInstance && this.editorInstance.getValue();\n        if (changedSchema) {\n          window.localStorage.setItem(\"schema\", changedSchema);\n          this.props.onChange(changedSchema);\n        }\n      });\n    }\n\n    this.addCommands(this.editorInstance);\n  }\n  public addCommands(editor: monaco.editor.IStandaloneCodeEditor | null) {\n    if (!editor) { return; }\n\n    // reset editor to empty schema\n\n    /* tslint:disable */\n    // replace schema:\n    // Press Chord Ctrl-K, Ctrl-R => the action will run if it is enabled\n\n    editor.addAction({\n      // An unique identifier of the contributed action.\n      id: \"replace-meta-schema\",\n\n      // A label of the action that will be presented to the user.\n      label: \"Replace Meta Schema\",\n\n      // An optional array of keybindings for the action.\n      keybindings: [\n        monaco.KeyMod.chord(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_K, monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_R),\n      ],\n      contextMenuGroupId: \"navigation\",\n      contextMenuOrder: 1.5,\n      // Method that will be executed when the action is triggered.\n      // @param editor The editor instance is passed in as a convinience\n      run: (ed) => {\n        const result = window.prompt(\"Paste schema to replace current meta schema\", \"{}\");\n        if (result) {\n          const metaSchema = JSON.parse(result);\n          this.metaSchema = metaSchema;\n        }\n        if (result != null) {\n          const modelUri = monaco.Uri.parse(`inmemory:/${Math.random()}/model/userSpec.json`);\n          monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n            enableSchemaRequest: true,\n            schemas: [\n              {\n                fileMatch: [\"*\"],\n                schema: this.metaSchema,\n                uri: modelUri.toString(),\n              },\n            ],\n            validate: true,\n          });\n        }\n      },\n    });\n\n    // Vim Mode:\n    // Press Chord Ctrl-K, Ctrl-V => the action will run if it is enabled\n\n    editor.addAction({\n      // An unique identifier of the contributed action.\n      id: \"vim-mode\",\n\n      // A label of the action that will be presented to the user.\n      label: \"Vim Mode\",\n\n      // An optional array of keybindings for the action.\n      keybindings: [\n        // chord\n        monaco.KeyMod.chord(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_K, monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_V),\n      ],\n      contextMenuGroupId: \"navigation\",\n      contextMenuOrder: 1.5,\n\n      // Method that will be executed when the action is triggered.\n      // @param editor The editor instance is passed in as a convinience\n      run: (ed) => {\n        this.onVimKeybind();\n      },\n    });\n    /* tslint:enable */\n  }\n  public onChange() {\n    if (this.props.onChangeMarkers) {\n      this.props.onChangeMarkers(monaco.editor.getModelMarkers({}));\n    }\n  }\n  public componentWillUnmount() {\n    if (this.editorInstance) {\n      this.editorInstance.dispose();\n    }\n  }\n  public onVimKeybind() {\n    if (this.vimMode) {\n      this.vimMode.dispose();\n      if (this.statusNode) {\n        this.statusNode.innerHTML = \"\";\n      }\n      this.vimMode = null;\n      return;\n    }\n    this.statusNode = document.getElementById(\"vim-status-bar\");\n    this.vimMode = initVimMode(this.editorInstance, this.statusNode);\n    return;\n  }\n  public render() {\n    return (\n      <>\n        <div style={{ height: \"100%\" }} ref={this.monaco} />\n        <div id=\"vim-status-bar\" style={{ position: \"fixed\", bottom: \"0\", background: \"white\", opacity: 0.5 }}></div>\n      </>\n    );\n  }\n}\n","import {\n  Snackbar,\n  SnackbarContent,\n  WithStyles,\n  withStyles,\n  Theme,\n} from \"@material-ui/core\";\nimport React, { Component, ChangeEvent } from \"react\";\nimport classNames from \"classnames\";\nimport { IUISchema } from \"../UISchema\";\nimport {isEmpty} from \"lodash\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport green from \"@material-ui/core/colors/green\";\nimport amber from \"@material-ui/core/colors/amber\";\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon,\n  debug: InfoIcon,\n};\n\nconst styleSnackBar = (theme: Theme) => ({\n  title: {\n    marginLeft: theme.spacing.unit,\n  },\n  close: {\n    padding: theme.spacing.unit / 2,\n  },\n  margin: {\n    margin: theme.spacing.unit,\n  },\n});\n\nconst styleSnackBarContent = (theme: Theme) => ({\n  success: {\n    color: green[600],\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  info: {\n    color: theme.palette.primary.dark,\n  },\n  debug: {\n    color: theme.palette.secondary.dark,\n  },\n  warning: {\n    color: amber[700],\n  },\n  icon: {\n    fontSize: 20,\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing.unit,\n  },\n  message: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  close: {\n    padding: theme.spacing.unit / 2,\n  },\n  margin: {\n    margin: theme.spacing.unit,\n  },\n\n});\n\nexport enum NotificationType {\n  error = \"error\",\n  warn = \"warning\",\n  info = \"info\",\n  success= \"success\",\n  debug = \"debug\",\n}\n\ninterface IProps extends WithStyles<typeof styleSnackBar> {\n  uiSchema?: IUISchema;\n  notification: ISnackBarNotification;\n  close: any;\n}\n\ninterface ISnackBarContentProps extends WithStyles<typeof styleSnackBarContent> {\n uiSchema?: IUISchema;\n onClose: any;\n variant: NotificationType;\n className: string;\n message: JSX.Element;\n}\n\nexport interface ISnackBarNotification {\n  type: NotificationType;\n  message: string;\n}\n\nclass SnackBarCntWrapper extends React.Component<ISnackBarContentProps> {\n  public render() {\n    const { classes, className, message, onClose, variant, ...other } = this.props;\n    const Icon = variantIcon[variant];\n    return (\n      <SnackbarContent\n        className={classNames(classes[variant], className)}\n        aria-describedby=\"client-snackbar\"\n        message={\n          <span id=\"client-snackbar\" className={classes.message}>\n            <Icon className={classNames(classes.icon, classes.iconVariant)} />\n            {message}\n          </span>\n        }\n        action={[\n          <IconButton\n            key=\"close\"\n            aria-label=\"Close\"\n            color=\"inherit\"\n            className={classes.close}\n            onClick={onClose}\n          >\n            <CloseIcon className={classes.icon} />\n          </IconButton>,\n        ]}\n        {...other}\n      />\n    );\n  }\n}\nconst SnackBarContentWrapper = withStyles(styleSnackBarContent)(SnackBarCntWrapper);\n\nclass SnackBarWrapper extends Component<IProps> {\n\n  public render() {\n    const { classes, notification, close } = this.props;\n    if (isEmpty(notification)) { return null; }\n    return (\n      <Snackbar\n      open\n      autoHideDuration={10000}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"left\",\n      }}>\n      <SnackBarContentWrapper\n      onClose={close}\n      variant={notification.type}\n      message={<span>{notification.message}</span>}\n      className={classes.margin}\n      />\n      </Snackbar>\n    );\n  }\n}\nexport const SnackBar = withStyles(styleSnackBar)(SnackBarWrapper);\n","export default async (schemaUrl: string) => {\n  try {\n    const response = await fetch(schemaUrl);\n    return await response.json();\n  } catch (e) {\n    throw new Error(`Unable to download openrpc.json file located at the url: ${schemaUrl}`);\n  }\n};\n","let idCounter = 0;\nexport default async (url: string) => {\n  try {\n    const response = await fetch(url, {\n      body: JSON.stringify({\n        id: idCounter++,\n        jsonrpc: \"2.0\",\n        method: \"rpc.discover\",\n        params: [],\n      }),\n      headers: {\"Content-Type\": \"application/json\"},\n      method: \"POST\",\n    });\n    return await response.json();\n  } catch (e) {\n    throw new Error(`Unable to call rpc.discover at: ${url}`);\n  }\n};\n","import React, { Component, ChangeEvent } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Grid,\n  Paper,\n  FormControlLabel,\n  Checkbox,\n  InputBase,\n  Theme,\n  WithStyles,\n  withStyles,\n  Hidden,\n} from \"@material-ui/core\";\nimport { IUISchema } from \"../UISchema\";\n\nconst styles = (theme: Theme) => ({\n  title: {\n    marginLeft: theme.spacing.unit,\n  },\n});\n\ninterface IProps extends WithStyles<typeof styles> {\n  uiSchema?: IUISchema;\n  onChangeUrl?: any;\n  onSplitViewChange?: any;\n}\n\nclass ApplicationBar extends Component<IProps> {\n  public render() {\n    const { uiSchema, classes } = this.props;\n    return (\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Grid justify=\"space-evenly\" alignItems=\"center\" container spacing={24}>\n            <Grid item xs={6} sm={3} direction=\"row\" justify=\"flex-start\" container>\n              {this.props.uiSchema && this.props.uiSchema.appBar && this.props.uiSchema.appBar[\"ui:logoUrl\"] &&\n                <Grid>\n                  <img\n                    alt=\"playground-title\"\n                    height=\"30\"\n                    src={this.props.uiSchema.appBar[\"ui:logoUrl\"]} />\n                </Grid>\n              }\n              <Grid>\n                <Typography className={classes.title} variant=\"h6\">\n                  {uiSchema && uiSchema.appBar[\"ui:title\"]}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Hidden only=\"xs\">\n              <Grid item sm={7}>\n                <Paper style={{\n                  background: \"rgba(0, 0, 0, 0.1)\",\n                  padding: \"0px 10px 0px 10px\",\n                  width: \"100%\",\n                }} elevation={0}>\n                  <InputBase\n                    style={{ width: \"100%\" }}\n                    onChange={this.props.onChangeUrl}\n                    placeholder={this.props.uiSchema && this.props.uiSchema.appBar[\"ui:inputPlaceholder\"]}\n                  />\n                </Paper>\n              </Grid>\n            </Hidden>\n            <Grid item xs={6} sm={2} alignItems=\"flex-end\">\n              <FormControlLabel\n                style={{ marginLeft: \"30px\", height: \"30px\" }}\n                control={\n                  <Checkbox\n                    checked={this.props.uiSchema && !!this.props.uiSchema.appBar[\"ui:splitView\"]}\n                    onChange={this.props.onSplitViewChange}\n                    value=\"splitView\"\n                    color=\"primary\"\n                  />\n                }\n                label=\"Split View\"\n              />\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\nexport default withStyles(styles)(ApplicationBar);\n","import React from \"react\";\nimport JSONValidationErrorList from \"./JSONValidationErrorList\";\nimport MonacoJSONEditor from \"./MonacoJSONEditor\";\nimport refParser from \"json-schema-ref-parser\";\nimport * as monaco from \"monaco-editor\";\nimport Documentation from \"@open-rpc/docs-react\";\nimport { debounce, isEmpty } from \"lodash\";\nimport \"./App.css\";\nimport fetchUrlSchemaFile from \"./fetchUrlSchemaFile\";\nimport fetchSchemaFromRpcDiscover from \"./fetchSchemaFromRpcDiscover\";\nimport AppBar from \"./AppBar/AppBar\";\nimport * as qs from \"qs\";\nimport { OpenRPC } from \"@open-rpc/meta-schema\";\nimport { IUISchema } from \"./UISchema\";\nimport {SnackBar, ISnackBarNotification, NotificationType} from \"./SnackBar/SnackBar\";\n\ninterface IState {\n  markers: any[];\n  notification: ISnackBarNotification;\n  defaultValue: string;\n  parsedSchema: OpenRPC;\n  reactJsonOptions: any;\n  uiSchema: IUISchema;\n}\n\nexport default class App extends React.Component<{}, IState> {\n  private debouncedHandleUrlChange: any;\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      defaultValue: \"\",\n      markers: [],\n      notification: {} as ISnackBarNotification,\n      parsedSchema: {} as OpenRPC,\n      reactJsonOptions: {\n        collapseStringsAfterLength: 25,\n        displayDataTypes: false,\n        displayObjectSize: false,\n        indentWidth: 2,\n        name: false,\n      },\n      uiSchema: {\n        appBar: {\n          \"ui:inputPlaceholder\": \"Enter OpenRPC Document Url or rpc.discover Endpoint\",\n          /* tslint:disable */\n          \"ui:logoUrl\": \"https://github.com/open-rpc/design/raw/master/icons/open-rpc-logo-noText/open-rpc-logo-noText%20(PNG)/128x128.png\",\n          /* tslint:enable */\n          \"ui:splitView\": true,\n          \"ui:title\": \"OpenRPC Playground\",\n        },\n        methods: {\n          \"ui:defaultExpanded\": false,\n        },\n        params: {\n          \"ui:defaultExpanded\": false,\n        },\n      },\n    };\n    this.refreshEditorData = this.refreshEditorData.bind(this);\n    this.setMarkers = debounce(this.setMarkers.bind(this), 300);\n    this.debouncedHandleUrlChange = debounce(this.dHandleUrlChange.bind(this), 300);\n    this.handleSnackbarClose = this.handleSnackbarClose.bind(this);\n  }\n\n  public setNotification = (notification: ISnackBarNotification) => {\n      this.setState({notification});\n  }\n  public setErrorNotification = (message: string) => {\n    this.setNotification({message, type: NotificationType.error});\n  }\n\n  public handleSnackbarClose() {\n    this.setState({ notification: {} as ISnackBarNotification });\n  }\n\n  public dHandleUrlChange = async (jsonOrRPC: string) => {\n    let newSchema;\n    if (isEmpty(jsonOrRPC)) {return; }\n    if (jsonOrRPC.match(/\\.json$/)) {\n      try {\n        newSchema = await fetchUrlSchemaFile(jsonOrRPC);\n      } catch (e) {\n        const msg = `Error fetching schema for: ${jsonOrRPC}`;\n        console.error(msg, e);\n        this.setErrorNotification(msg);\n        return;\n      }\n    } else {\n      try {\n        const rpcResult = await fetchSchemaFromRpcDiscover(jsonOrRPC);\n        newSchema = rpcResult.result;\n      } catch (e) {\n        const msg = `Error fetching rpc.discover for: ${jsonOrRPC}`;\n        console.error(msg, e);\n        this.setErrorNotification(msg);\n        return;\n      }\n    }\n    monaco.editor.getModels()[0].setValue(JSON.stringify(newSchema, undefined, \" \"));\n    this.refreshEditorData();\n    this.setState({\n      ...this.state,\n      defaultValue: newSchema,\n    });\n  }\n\n  public handleUrlChange = (event: any) => this.debouncedHandleUrlChange(event.target.value);\n\n  public handleUISchemaAppBarChange = (name: string) => (event: any) => {\n    this.setState({\n      ...this.state,\n      uiSchema: {\n        ...this.state.uiSchema,\n        appBar: {\n          ...this.state.uiSchema.appBar,\n          [name]: event.target.checked,\n        },\n      },\n    });\n  }\n\n  public async componentDidMount() {\n    const urlParams = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true,\n      depth: 100,\n      decoder(str) {\n        if (/^(\\d+|\\d*\\.\\d+)$/.test(str)) {\n          return parseFloat(str);\n        }\n\n        if (str === \"false\") {\n          return false;\n        }\n        if (str === \"true\") {\n          return true;\n        }\n        return decodeURIComponent(str);\n      },\n    });\n    if (urlParams.schemaUrl) {\n      this.dHandleUrlChange(urlParams.schemaUrl);\n    }\n    if (urlParams.schema) {\n      monaco.editor.getModels()[0].setValue(JSON.stringify(urlParams.schema, undefined, \" \"));\n    }\n    if (urlParams.uiSchema) {\n      this.setState({\n        uiSchema: {\n          ...this.state.uiSchema,\n          ...urlParams.uiSchema,\n        },\n      });\n    }\n    setTimeout(this.refreshEditorData, 300);\n    setTimeout(this.refreshEditorData, 2000);\n  }\n\n  public refeshMarkers() {\n    setTimeout(() => {\n      const markers = monaco.editor.getModelMarkers({});\n      this.setState({\n        markers,\n      });\n    }, 1000);\n  }\n  public async refreshEditorData() {\n    let parsedSchema;\n    try {\n      parsedSchema = await refParser.dereference(JSON.parse(monaco.editor.getModels()[0].getValue())) as OpenRPC;\n    } catch (e) {\n      console.error(\"error parsing schema\", e);\n    }\n\n    if (!parsedSchema) {\n      this.refeshMarkers();\n      return;\n    }\n\n    this.setState({\n      ...this.state,\n      parsedSchema: parsedSchema || this.state.parsedSchema,\n    });\n\n    this.refeshMarkers();\n  }\n  public setMarkers() {\n    this.refreshEditorData();\n  }\n\n  public render() {\n    return (\n      <>\n        <AppBar\n          uiSchema={this.state.uiSchema}\n          onSplitViewChange={this.handleUISchemaAppBarChange(\"ui:splitView\")}\n          onChangeUrl={this.handleUrlChange} />\n        <div style={{ height: \"100%\", display: \"flex\", flexDirection: \"row\" }}>\n          {this.state.uiSchema.appBar[\"ui:splitView\"] &&\n            <div style={{ display: \"flex\", flexDirection: \"column\", height: \"100%\", width: \"50%\" }} >\n              <JSONValidationErrorList markers={this.state.markers} />\n              <MonacoJSONEditor\n                defaultValue={this.state.defaultValue}\n                onChange={this.setMarkers.bind(this)} />\n            </div>\n          }\n          <div className=\"docs\">\n            <Documentation\n              schema={this.state.parsedSchema as OpenRPC}\n              uiSchema={this.state.uiSchema}\n              reactJsonOptions={this.state.reactJsonOptions}\n            />\n          </div>\n        </div>\n        <SnackBar close={this.handleSnackbarClose} notification={this.state.notification}/>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}